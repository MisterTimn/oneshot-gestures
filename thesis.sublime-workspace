{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"batch",
				"batch_size"
			],
			[
				"label",
				"labels_original"
			],
			[
				"reg",
				"regularization"
			],
			[
				"regu",
				"regularize_network_params"
			],
			[
				"net",
				"network"
			],
			[
				"save_param",
				"save_param_values"
			],
			[
				"val",
				"validate"
			],
			[
				"load",
				"load_testing_set"
			],
			[
				"labels",
				"labels_test"
			],
			[
				"val_",
				"val_batches"
			],
			[
				"train_",
				"train_batches"
			],
			[
				"y",
				"y_validate"
			],
			[
				"iter",
				"iterate_minibatches"
			],
			[
				"num",
				"num_epochs"
			],
			[
				"tes",
				"test_acc"
			],
			[
				"test",
				"test_loss"
			],
			[
				"target",
				"target_var"
			],
			[
				"non",
				"nonlinearities"
			],
			[
				"vali",
				"validate_dict"
			],
			[
				"train",
				"train_dict"
			],
			[
				"class",
				"class_nr"
			],
			[
				"labe",
				"labels_test"
			],
			[
				"sample",
				"sample_size"
			],
			[
				"f",
				"f"
			],
			[
				"cla",
				"class_to_filter"
			],
			[
				"predic",
				"predictions_test"
			],
			[
				"save",
				"save_param_path"
			],
			[
				"savepara",
				"save_param_path"
			],
			[
				"param",
				"param_values"
			]
		]
	},
	"buffers":
	[
		{
			"file": "convnet.py",
			"settings":
			{
				"buffer_size": 3973,
				"line_ending": "Unix"
			}
		},
		{
			"file": "convnet_main.py",
			"settings":
			{
				"buffer_size": 4205,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import h5py\nimport theano\nimport numpy as np\nimport time\nfrom pylearn2.format.target_format import OneHotFormatter\n\nclass load(object):\n\n    def __init__(self, size_ratio=1):\n        print\n        print \"Initializing load_module...\"\n\n        data_path = \"/home/jasper/oneshot-gestures/data-chalearn/\"\n        \"\"\"\n        data_revised\n        data_oneshotlearning\n        \"\"\"\n        # file = h5py.File(data_path+\"data_oneshotlearning.hdf5\",\"r\")\n        \n        # # self.samples = file[\"samples_oneshot\"] \n        # # self.labels = file[\"labels_oneshot\"]\n        # # self.labels_original = file[\"labels_original_oneshot\"]\n\n        # self.samples = 40file[\"samples_19cl\"]\n        # self.labels = file[\"labels_19cl\"]\n        # self.labels_original = file[\"labels_original_19cl\"]\n        \n        file = h5py.File(data_path+\"data_ints.hdf5\",\"r\")\n\n        self.samples = np.asarray(file[\"samples\"], dtype='float32')\n        self.labels = file[\"labels\"]\n        self.labels_original = file[\"labels_original\"]\n\n        self.sample_size = int((self.samples.shape[0])*size_ratio)\n\n    def load_training_set(self):\n        x_train = self.samples[0:int(self.sample_size*0.6)]\n        labels_train = self.labels_original[0:int(self.sample_size*0.6)]\n        return x_train, labels_train\n\n    def load_validation_set(self):\n        x_validate = self.samples[int(self.sample_size*0.6):int(self.sample_size*0.8)]\n        labels_validate = self.labels_original[int(self.sample_size*0.6):int(self.sample_size*0.8)]\n        return x_validate, labels_validate\n\n    def load_testing_set(self):\n        x_test = self.samples[int(self.sample_size*0.8):self.sample_size]\n        labels_test = self.labels_original[int(self.sample_size*0.8):self.sample_size]\n        return x_test, labels_test\n\n    # def load_training_set(self):\n    #     x_train = self.samples[0:int(self.sample_size*0.6)]\n    #     y_train = self.labels[0:int(self.sample_size*0.6)]\n    #     labels_train = self.labels_original[0:int(self.sample_size*0.6)]\n    #     return x_train, y_train, labels_train\n\n    # def load_validation_set(self):\n    #     x_validate = self.samples[int(self.sample_size*0.6):int(self.sample_size*0.8)]\n    #     y_validate = self.labels[int(self.sample_size*0.6):int(self.sample_size*0.8)]\n    #     labels_validate = self.labels_original[int(self.sample_size*0.6):int(self.sample_size*0.8)]\n    #     return x_validate, y_validate, labels_validate\n\n    # def load_testing_set(self):\n    #     x_test = self.samples[int(self.sample_size*0.8):self.sample_size]\n    #     y_test = self.labels[int(self.sample_size*0.8):self.sample_size]\n    #     labels_test = self.labels_original[int(self.sample_size*0.8):self.sample_size]\n    #     return x_test, y_test, labels_test",
			"file": "load_class.py",
			"file_size": 2744,
			"file_write_time": 131003133022469235,
			"settings":
			{
				"buffer_size": 2746,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jasper/oneshot-gestures_vgl/convnet.py",
			"settings":
			{
				"buffer_size": 2694,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jasper/oneshot-gestures_vgl/convnet_main.py",
			"settings":
			{
				"buffer_size": 2365,
				"line_ending": "Unix"
			}
		},
		{
			"file": "data-scripts/generate_hdf5_data_intversion.py",
			"settings":
			{
				"buffer_size": 1838,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import theano\nimport theano.tensor as T\nimport numpy as np\nimport os\nimport time\n\nimport load_class\nload = load_class.load(1)\n\nimport convnet\nconvnet = convnet.convnet()\n\n\"\"\"\nInitialize output File-ID and file\n\"\"\"\ni = 0\nwhile os.path.exists(\"output/acc-cost_%s.csv\" % i):\n    i += 1\nprint \"File-ID: %s\" % i\nfo1 = open(\"output/acc-cost_%s.csv\" % i, \"w\")\n\nsave_param_path = \"model_parameters/param_model\"\n\nx_validate, labels_validate = load.load_validation_set()\nx_train, t_train = load.load_training_set()\n\nbatch_size = 20\niterationIndex=0\nx=raw_input(\"Number of iterations to perform: \")\nwhile(not x.isdigit()):\n	x=raw_input(\"Not a valid number, again: \")\n\niterations=int(x)\ngo=True\ntry:\n	while (go):\n		start_time = time.time()\n		iterationIndex=iterationIndex+1\n		list_cost = []\n\n		start_iteration_time = time.time()\n		for start in range(0, len(x_train), batch_size):\n			x_batch = x_train[start:start + batch_size]\n			t_batch = t_train[start:start + batch_size]\n			print x_batch.type\n			print t_batch.type\n			cost = convnet.train(x_batch, t_batch)\n\n			list_cost.append(cost)\n\n		predictions_validate = []\n		for start in range(0, len(x_validate), batch_size):\n			predictions_validate.extend(convnet.predict(x_validate[start:start+batch_size]))\n\n		cost_avg = np.average(list_cost)\n		accuracy = np.mean(predictions_validate == labels_validate)\n\n		print \"%3d: acc = %.5f || cost = %.5f\" % (iterationIndex, accuracy, cost_avg)\n		fo1.write(\"%.5f;%.5f;%.5f\\n\" % (accuracy, cost_avg, time.time() - start_iteration_time))\n\n		#Save the model parameters at certain intervals\n		#For safety\n		if(iterationIndex%25 == 0):\n			convnet.save_param_values(save_param_path)\n			print \"Model parameters saved.\"\n\n		if(iterationIndex==iterations):\n			print(\"--- Execution time: %s seconds ---\" % (time.time() - start_time))\n			x=raw_input(\"#Iterations or q(uit): \")\n			if(x=='q' or x=='quit'):\n				go=False\n			else:\n				while(not x.isdigit()):\n					x=raw_input(\"Not a valid number, again: \")\n				iterations+=int(x)\n\nexcept KeyboardInterrupt:\n	print \"Program forced to stop via KeyboardInterrupt\"\nexcept:\n	raise\n\nconvnet.save_param_values(save_param_path)\n\nx_test, labels_test = load.Load_testing_set()\npredictions_test = convnet.predict(x_test)\ntest_accuracy = np.mean(predictions_test == labels_test)\n\nprint \"Accuracy of testset prediction: %.5f\" % test_accuracy\nfo1.close()",
			"file": "/home/jasper/Thesis/convnet_main.py",
			"file_size": 2349,
			"file_write_time": 131001086539815700,
			"settings":
			{
				"buffer_size": 2350,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jasper/Thesis/convnet.py",
			"settings":
			{
				"buffer_size": 2733,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 24.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 294.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/jasper/Algoritmen/test.cpp",
		"/home/jasper/Thesis/convnet.py",
		"/home/jasper/oneshot-gestures/data-chalearn/data-scripts/generate_hdf5_data.py",
		"/home/jasper/oneshot-gestures/load_class.py",
		"/home/jasper/oneshot-gestures/output/acc-cost_3.csv",
		"/home/jasper/oneshot-gestures/convnet_main.py",
		"/home/jasper/oneshot-gestures/data-chalearn/data-scripts/load_class.py",
		"/home/jasper/oneshot-gestures/convnet.py",
		"/home/jasper/oneshot-gestures/data-chalearn/data-scripts/generate_dictionary.py",
		"/home/jasper/oneshot-gestures/output/acc-cost_1.csv",
		"/home/jasper/oneshot-gestures/data_visual.py",
		"/home/jasper/Thesis/convnet_main.py",
		"/home/jasper/oneshot-gestures/load.py",
		"/home/jasper/Thesis/load_class.py",
		"/home/jasper/Thesis/model_class.py",
		"/media/jasper/SSD-500/Users/JasperV/Google Drive/SCHOOL/Algoritmen/Labo 1/oef02.cpp"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			":8.3",
			"self.",
			"self",
			"100",
			" network",
			"network",
			"labels_oneshot",
			"labels_original_oneshot",
			"samples_oneshot",
			"lasagne",
			"ds",
			"\\t",
			"max_val_err",
			"load_testing_set",
			"iterations",
			"Iterations",
			"iterations",
			"Iterations",
			"iterations",
			"l_out",
			"y",
			"p_y_given_x",
			"y",
			"p_y_given_x",
			"validate_dict",
			"t_train",
			"t-train",
			".",
			"iteratie",
			"aantal_iteraties",
			"trunc_to"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"nn",
			"test_dict",
			"labels_train",
			",",
			"iterationIndex",
			"iterations"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "convnet.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3973,
						"regions":
						{
						},
						"selection":
						[
							[
								183,
								183
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 126.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "convnet_main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4205,
						"regions":
						{
						},
						"selection":
						[
							[
								1176,
								1176
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 168.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "load_class.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2746,
						"regions":
						{
						},
						"selection":
						[
							[
								650,
								650
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 84.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/jasper/oneshot-gestures_vgl/convnet.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2694,
						"regions":
						{
						},
						"selection":
						[
							[
								699,
								699
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 24.0,
						"translation.y": 336.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/jasper/oneshot-gestures_vgl/convnet_main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2365,
						"regions":
						{
						},
						"selection":
						[
							[
								1125,
								1125
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 99.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "data-scripts/generate_hdf5_data_intversion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1838,
						"regions":
						{
						},
						"selection":
						[
							[
								1755,
								1755
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/jasper/Thesis/convnet_main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2350,
						"regions":
						{
						},
						"selection":
						[
							[
								1048,
								1048
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/jasper/Thesis/convnet.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2733,
						"regions":
						{
						},
						"selection":
						[
							[
								1201,
								1201
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 420.0,
						"translation.y": 294.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.546776437078,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 113.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
